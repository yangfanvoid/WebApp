/*
 * Copyright (c) 2014-2016. JarkimZhu
 * This software can not be used privately without permission
 */


class _Headers {
  _xhr;
  constructor(xhr) {
    this._xhr = xhr;
  }
  get(headerName) {
    return this._xhr.getResponseHeader(headerName);
  }
}

class _Response {
  _xhr;

  constructor(xhr) {
    this._xhr = xhr;
  }

  json() {
    return new Promise((resolve, reject) => {
      try {
        const text = this._xhr.responseText;
        const json = JSON.parse(text);
        resolve(json);
      } catch (e) {
        reject(e);
      }
    });
  }

  text() {
    return new Promise((resolve, reject) => {
      try {
        const text = this._xhr.responseText;
        resolve(text);
      } catch (e) {
        reject(e);
      }
    });
  }

  get headers() {
    return new _Headers(this._xhr);
  }
}

/**
 * @version 0.0.1-SNAPSHOT
 * @author JarkimZhu
 * Created on 2015/7/4.
 * @class
 */
export default class AjaxHttpClient {
  constructor(forceSetCookie) {
    this._cookie = null;
    this._forceSetCookie = forceSetCookie;
    this._rewriteUri = false;
  }

  get(url, request, isScriptGet, enableCache) {
    if (!isScriptGet) {
      const cookieUrl = this._setCookie(url, request);
      return new Promise((resolve, reject) => {
        const xhr = AjaxHttpClient._createCORSRequest(reject);
        xhr.onreadystatechange = () => {
          this._onLoaded(xhr, resolve, reject);
        };

        try {
          xhr.timeout = 15000; // 超时时间,毫秒单位
        } catch (e) {}

        xhr.open('GET', cookieUrl, true);
        xhr.withCredentials = true;
        xhr.setRequestHeader('Accept', '*/*;type=ajax');

        if (request && request.headers) {
          const headers = request.headers;
          for (const key in headers) {
            if (Object.hasOwnProperty.call(headers, key)) {
              xhr.setRequestHeader(key, headers[key]);
            }
          }
        }

        xhr.send();
      });
    }
    return AjaxHttpClient._scriptGet(url, enableCache);
  }

  post(url, request) {
    const mRequest = request;
    mRequest.method = 'POST';
    return this._execute(url, mRequest);
  }

  put(url, request) {
    const mRequest = request;
    mRequest.method = 'PUT';
    return this._execute(url, mRequest);
  }

  delete(url, request) {
    const mRequest = request;
    mRequest.method = 'DELETE';
    return this._execute(url, mRequest);
  }

  patch(url, request) {
    const mRequest = request;
    mRequest.method = 'PATCH';
    return this._execute(url, mRequest);
  }

  _execute(url, request) {
    let body = request.body;
    const headers = request.headers;

    if (body && headers && !headers['Content-Type']) {
      if (typeof body === 'object') {
        headers['Content-Type'] = 'application/json;charset=UTF-8';
        body = JSON.stringify(body);
      } else if (typeof body === 'string') {
        headers['Content-Type'] = 'text/plain;charset=UTF-8';
      }
    }

    const cookieUrl = this._setCookie(url, request);

    return new Promise((resolve, reject) => {
      const xhr = AjaxHttpClient._createCORSRequest(reject);
      xhr.onreadystatechange = () => {
        this._onLoaded(xhr, resolve, reject);
      };
      try {
        xhr.timeout = 15000; // 超时时间,毫秒单位
      } catch (e) {}

      try {
        xhr.open(request.method, cookieUrl, true);
      } catch (e) {
        alert('您当前IE9浏览器版本过低,需要修改相关配置才能正常使用相关功能;\n步骤：点击浏览器右上角齿轮图标->Internet 选项->安全->自定义级别;\n将【通过域访问数据源】设置为启用;点击确认');
      }

      xhr.withCredentials = true;

      xhr.setRequestHeader('Accept', '*/*;type=ajax');

      for (const key in headers) {
        if (Object.hasOwnProperty.call(headers, key)) {
          xhr.setRequestHeader(key, headers[key]);
        }
      }

      xhr.send(body);
    });
  }

  upload(url, request, pcb) {
    const body = request.body;
    const headers = request.headers;

    let formData;
    // eslint-disable-next-line
    if (body instanceof FormData) {
      formData = body;
    } else {
      // eslint-disable-next-line
      formData = new FormData();
      for (const key in body) {
        if (Object.hasOwnProperty.call(body, key)) {
          formData.append(key, body[key]);
        }
      }
    }

    const cookieUrl = this._setCookie(url, request);

    return new Promise((resolve, reject) => {
      const xhr = AjaxHttpClient._createCORSRequest(reject);
      xhr.onreadystatechange = () => {
        this._onLoaded(xhr, resolve, reject);
      };
      try {
        xhr.timeout = 15000; // 超时时间,毫秒单位
      } catch (e) {}

      xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
          const percent = event.loaded / event.total;
          if (pcb) pcb(percent);
        }
      };

      xhr.open('POST', cookieUrl, true);
      xhr.withCredentials = true;

      for (const key in headers) {
        if (Object.hasOwnProperty.call(headers, key)) {
          xhr.setRequestHeader(key, headers[key]);
        }
      }

      xhr.send(formData);
    });
  }

  clearCookie() {
    this._cookie = null;
    this._rewriteUri = false;
  }

  _setCookie(url, request) {
    if (this._cookie && !this._rewriteUri) {
      const headers = request.headers;
      headers.Cookie = this._cookie;
    } else if (this._cookie && this._rewriteUri) {
      const index = url.indexOf('?');
      if (index > -1) {
        const prefix = url.substring(0, index);
        const suffix = url.substring(index);
        return `${prefix};${this._cookie}${suffix}`;
      }
      return `${url};${this._cookie}`;
    }
    return url;
  }

  static _createCORSRequest(cb) {
    // let xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('MSXML2.XMLHTTP');
    // if ('withCredentials' in xhr) {
    //   // Check if the XMLHttpRequest object has a "withCredentials" property.
    //   // "withCredentials" only exists on XMLHTTPRequest2 objects.
    //   xhr.withCredentials = true;
    // } else if (typeof XDomainRequest !== 'undefined') {
    //   // Otherwise, check if XDomainRequest.
    //   // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
    //   xhr = new XDomainRequest();
    // }

    let xhr = new XMLHttpRequest();
  
    xhr.onerror = (e) => {
      if (cb) cb(e);
    };
    xhr.onabort = (e) => {
      if (cb) cb(e);
    };
    xhr.ontimeout = (e) => {
      if (cb) cb(e);
    };
    return xhr;
  }

  _onLoaded(xhr, resolve, reject) {
    if (xhr.readyState === 4) {
      if (xhr.status >= 200 && xhr.status <= 207) {
        if (this._forceSetCookie) {
          let cookie = xhr.getResponseHeader('Set-Cookie');
          if (cookie) {
            cookie = cookie.substring(0, cookie.indexOf(';'));
            this._cookie = cookie;
          } else {
            cookie = xhr.getResponseHeader('Set-Session-Id');
            if (cookie) {
              this._cookie = cookie;
              this._rewriteUri = true;
            }
          }
        }

        if (xhr.status === 202) {
          const linaRedirectURL = xhr.getResponseHeader('Lina-Redirect-URL');
          if (linaRedirectURL && typeof window !== 'undefined') {
            window.location.href = linaRedirectURL;
          }
        }
        resolve(new _Response(xhr));
      } else if (xhr.status !== 0) {
        reject(new Error(`status code: ${xhr.status}`));
      } else {
        reject({ status: xhr.status });
      }
    }
  }

  static _scriptGet(url, enableCache) {
    const d = document;
    const s = document.createElement('script');

    return new Promise((resolve, reject) => {
      function _onError() {
        s.parentNode.removeChild(s);
        reject(`Load ${url} failed!`);
      }
      function _onLoad() {
        s.parentNode.removeChild(s);
        this.removeEventListener('load', _onLoad, false);
        this.removeEventListener('error', _onError, false);
        resolve();
      }
      s.addEventListener('load', _onLoad, false);

      s.addEventListener('error', _onError, false);

      if (enableCache) {
        s.src = `${url}&_t=${new Date().getTime()}`;
      } else {
        s.src = url;
      }

      d.body.appendChild(s);
    });
  }
}
