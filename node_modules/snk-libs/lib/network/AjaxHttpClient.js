'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2014-2016. JarkimZhu
 * This software can not be used privately without permission
 */

var _Headers = function () {
  function _Headers(xhr) {
    (0, _classCallCheck3.default)(this, _Headers);

    this._xhr = xhr;
  }

  (0, _createClass3.default)(_Headers, [{
    key: 'get',
    value: function get(headerName) {
      return this._xhr.getResponseHeader(headerName);
    }
  }]);
  return _Headers;
}();

var _Response = function () {
  function _Response(xhr) {
    (0, _classCallCheck3.default)(this, _Response);

    this._xhr = xhr;
  }

  (0, _createClass3.default)(_Response, [{
    key: 'json',
    value: function json() {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        try {
          var text = _this._xhr.responseText;
          var json = JSON.parse(text);
          resolve(json);
        } catch (e) {
          reject(e);
        }
      });
    }
  }, {
    key: 'text',
    value: function text() {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {
        try {
          var text = _this2._xhr.responseText;
          resolve(text);
        } catch (e) {
          reject(e);
        }
      });
    }
  }, {
    key: 'headers',
    get: function get() {
      return new _Headers(this._xhr);
    }
  }]);
  return _Response;
}();

/**
 * @version 0.0.1-SNAPSHOT
 * @author JarkimZhu
 * Created on 2015/7/4.
 * @class
 */


var AjaxHttpClient = function () {
  function AjaxHttpClient(forceSetCookie) {
    (0, _classCallCheck3.default)(this, AjaxHttpClient);

    this._cookie = null;
    this._forceSetCookie = forceSetCookie;
    this._rewriteUri = false;
  }

  (0, _createClass3.default)(AjaxHttpClient, [{
    key: 'get',
    value: function get(url, request, isScriptGet, enableCache) {
      var _this3 = this;

      if (!isScriptGet) {
        var cookieUrl = this._setCookie(url, request);
        return new _promise2.default(function (resolve, reject) {
          var xhr = AjaxHttpClient._createCORSRequest(reject);
          xhr.onreadystatechange = function () {
            _this3._onLoaded(xhr, resolve, reject);
          };

          try {
            xhr.timeout = 15000; // 超时时间,毫秒单位
          } catch (e) {}

          xhr.open('GET', cookieUrl, true);
          xhr.withCredentials = true;
          xhr.setRequestHeader('Accept', '*/*;type=ajax');

          if (request && request.headers) {
            var headers = request.headers;
            for (var key in headers) {
              if (Object.hasOwnProperty.call(headers, key)) {
                xhr.setRequestHeader(key, headers[key]);
              }
            }
          }

          xhr.send();
        });
      }
      return AjaxHttpClient._scriptGet(url, enableCache);
    }
  }, {
    key: 'post',
    value: function post(url, request) {
      var mRequest = request;
      mRequest.method = 'POST';
      return this._execute(url, mRequest);
    }
  }, {
    key: 'put',
    value: function put(url, request) {
      var mRequest = request;
      mRequest.method = 'PUT';
      return this._execute(url, mRequest);
    }
  }, {
    key: 'delete',
    value: function _delete(url, request) {
      var mRequest = request;
      mRequest.method = 'DELETE';
      return this._execute(url, mRequest);
    }
  }, {
    key: 'patch',
    value: function patch(url, request) {
      var mRequest = request;
      mRequest.method = 'PATCH';
      return this._execute(url, mRequest);
    }
  }, {
    key: '_execute',
    value: function _execute(url, request) {
      var _this4 = this;

      var body = request.body;
      var headers = request.headers;

      if (body && headers && !headers['Content-Type']) {
        if ((typeof body === 'undefined' ? 'undefined' : (0, _typeof3.default)(body)) === 'object') {
          headers['Content-Type'] = 'application/json;charset=UTF-8';
          body = (0, _stringify2.default)(body);
        } else if (typeof body === 'string') {
          headers['Content-Type'] = 'text/plain;charset=UTF-8';
        }
      }

      var cookieUrl = this._setCookie(url, request);

      return new _promise2.default(function (resolve, reject) {
        var xhr = AjaxHttpClient._createCORSRequest(reject);
        xhr.onreadystatechange = function () {
          _this4._onLoaded(xhr, resolve, reject);
        };
        try {
          xhr.timeout = 15000; // 超时时间,毫秒单位
        } catch (e) {}

        try {
          xhr.open(request.method, cookieUrl, true);
        } catch (e) {
          alert('您当前IE9浏览器版本过低,需要修改相关配置才能正常使用相关功能;\n步骤：点击浏览器右上角齿轮图标->Internet 选项->安全->自定义级别;\n将【通过域访问数据源】设置为启用;点击确认');
        }

        xhr.withCredentials = true;

        xhr.setRequestHeader('Accept', '*/*;type=ajax');

        for (var key in headers) {
          if (Object.hasOwnProperty.call(headers, key)) {
            xhr.setRequestHeader(key, headers[key]);
          }
        }

        xhr.send(body);
      });
    }
  }, {
    key: 'upload',
    value: function upload(url, request, pcb) {
      var _this5 = this;

      var body = request.body;
      var headers = request.headers;

      var formData = void 0;
      // eslint-disable-next-line
      if (body instanceof FormData) {
        formData = body;
      } else {
        // eslint-disable-next-line
        formData = new FormData();
        for (var key in body) {
          if (Object.hasOwnProperty.call(body, key)) {
            formData.append(key, body[key]);
          }
        }
      }

      var cookieUrl = this._setCookie(url, request);

      return new _promise2.default(function (resolve, reject) {
        var xhr = AjaxHttpClient._createCORSRequest(reject);
        xhr.onreadystatechange = function () {
          _this5._onLoaded(xhr, resolve, reject);
        };
        try {
          xhr.timeout = 15000; // 超时时间,毫秒单位
        } catch (e) {}

        xhr.upload.onprogress = function (event) {
          if (event.lengthComputable) {
            var percent = event.loaded / event.total;
            if (pcb) pcb(percent);
          }
        };

        xhr.open('POST', cookieUrl, true);
        xhr.withCredentials = true;

        for (var _key in headers) {
          if (Object.hasOwnProperty.call(headers, _key)) {
            xhr.setRequestHeader(_key, headers[_key]);
          }
        }

        xhr.send(formData);
      });
    }
  }, {
    key: 'clearCookie',
    value: function clearCookie() {
      this._cookie = null;
      this._rewriteUri = false;
    }
  }, {
    key: '_setCookie',
    value: function _setCookie(url, request) {
      if (this._cookie && !this._rewriteUri) {
        var headers = request.headers;
        headers.Cookie = this._cookie;
      } else if (this._cookie && this._rewriteUri) {
        var index = url.indexOf('?');
        if (index > -1) {
          var prefix = url.substring(0, index);
          var suffix = url.substring(index);
          return prefix + ';' + this._cookie + suffix;
        }
        return url + ';' + this._cookie;
      }
      return url;
    }
  }, {
    key: '_onLoaded',
    value: function _onLoaded(xhr, resolve, reject) {
      if (xhr.readyState === 4) {
        if (xhr.status >= 200 && xhr.status <= 207) {
          if (this._forceSetCookie) {
            var cookie = xhr.getResponseHeader('Set-Cookie');
            if (cookie) {
              cookie = cookie.substring(0, cookie.indexOf(';'));
              this._cookie = cookie;
            } else {
              cookie = xhr.getResponseHeader('Set-Session-Id');
              if (cookie) {
                this._cookie = cookie;
                this._rewriteUri = true;
              }
            }
          }

          if (xhr.status === 202) {
            var linaRedirectURL = xhr.getResponseHeader('Lina-Redirect-URL');
            if (linaRedirectURL && typeof window !== 'undefined') {
              window.location.href = linaRedirectURL;
            }
          }
          resolve(new _Response(xhr));
        } else if (xhr.status !== 0) {
          reject(new Error('status code: ' + xhr.status));
        } else {
          reject({ status: xhr.status });
        }
      }
    }
  }], [{
    key: '_createCORSRequest',
    value: function _createCORSRequest(cb) {
      // let xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('MSXML2.XMLHTTP');
      // if ('withCredentials' in xhr) {
      //   // Check if the XMLHttpRequest object has a "withCredentials" property.
      //   // "withCredentials" only exists on XMLHTTPRequest2 objects.
      //   xhr.withCredentials = true;
      // } else if (typeof XDomainRequest !== 'undefined') {
      //   // Otherwise, check if XDomainRequest.
      //   // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
      //   xhr = new XDomainRequest();
      // }

      var xhr = new XMLHttpRequest();

      xhr.onerror = function (e) {
        if (cb) cb(e);
      };
      xhr.onabort = function (e) {
        if (cb) cb(e);
      };
      xhr.ontimeout = function (e) {
        if (cb) cb(e);
      };
      return xhr;
    }
  }, {
    key: '_scriptGet',
    value: function _scriptGet(url, enableCache) {
      var d = document;
      var s = document.createElement('script');

      return new _promise2.default(function (resolve, reject) {
        function _onError() {
          s.parentNode.removeChild(s);
          reject('Load ' + url + ' failed!');
        }
        function _onLoad() {
          s.parentNode.removeChild(s);
          this.removeEventListener('load', _onLoad, false);
          this.removeEventListener('error', _onError, false);
          resolve();
        }
        s.addEventListener('load', _onLoad, false);

        s.addEventListener('error', _onError, false);

        if (enableCache) {
          s.src = url + '&_t=' + new Date().getTime();
        } else {
          s.src = url;
        }

        d.body.appendChild(s);
      });
    }
  }]);
  return AjaxHttpClient;
}();

exports.default = AjaxHttpClient;